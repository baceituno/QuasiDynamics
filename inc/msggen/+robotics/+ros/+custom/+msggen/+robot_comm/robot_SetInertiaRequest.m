classdef robot_SetInertiaRequest < robotics.ros.Message
    %robot_SetInertiaRequest MATLAB implementation of robot_comm/robot_SetInertiaRequest
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2018 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'robot_comm/robot_SetInertiaRequest' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'c0461f29ac65de5e1504f71622d9e55e' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Dependent)
        M
        Cgx
        Cgy
        Cgz
        Ix
        Iy
        Iz
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Cgx', 'Cgy', 'Cgz', 'Ix', 'Iy', 'Iz', 'M'} % List of non-constant message properties
        ROSPropertyList = {'cgx', 'cgy', 'cgz', 'ix', 'iy', 'iz', 'm'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = robot_SetInertiaRequest(msg)
            %robot_SetInertiaRequest Construct the message object robot_SetInertiaRequest
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function m = get.M(obj)
            %get.M Get the value for property M
            m = double(obj.JavaMessage.getM);
        end
        
        function set.M(obj, m)
            %set.M Set the value for property M
            validateattributes(m, {'numeric'}, {'nonempty', 'scalar'}, 'robot_SetInertiaRequest', 'M');
            
            obj.JavaMessage.setM(m);
        end
        
        function cgx = get.Cgx(obj)
            %get.Cgx Get the value for property Cgx
            cgx = double(obj.JavaMessage.getCgx);
        end
        
        function set.Cgx(obj, cgx)
            %set.Cgx Set the value for property Cgx
            validateattributes(cgx, {'numeric'}, {'nonempty', 'scalar'}, 'robot_SetInertiaRequest', 'Cgx');
            
            obj.JavaMessage.setCgx(cgx);
        end
        
        function cgy = get.Cgy(obj)
            %get.Cgy Get the value for property Cgy
            cgy = double(obj.JavaMessage.getCgy);
        end
        
        function set.Cgy(obj, cgy)
            %set.Cgy Set the value for property Cgy
            validateattributes(cgy, {'numeric'}, {'nonempty', 'scalar'}, 'robot_SetInertiaRequest', 'Cgy');
            
            obj.JavaMessage.setCgy(cgy);
        end
        
        function cgz = get.Cgz(obj)
            %get.Cgz Get the value for property Cgz
            cgz = double(obj.JavaMessage.getCgz);
        end
        
        function set.Cgz(obj, cgz)
            %set.Cgz Set the value for property Cgz
            validateattributes(cgz, {'numeric'}, {'nonempty', 'scalar'}, 'robot_SetInertiaRequest', 'Cgz');
            
            obj.JavaMessage.setCgz(cgz);
        end
        
        function ix = get.Ix(obj)
            %get.Ix Get the value for property Ix
            ix = double(obj.JavaMessage.getIx);
        end
        
        function set.Ix(obj, ix)
            %set.Ix Set the value for property Ix
            validateattributes(ix, {'numeric'}, {'nonempty', 'scalar'}, 'robot_SetInertiaRequest', 'Ix');
            
            obj.JavaMessage.setIx(ix);
        end
        
        function iy = get.Iy(obj)
            %get.Iy Get the value for property Iy
            iy = double(obj.JavaMessage.getIy);
        end
        
        function set.Iy(obj, iy)
            %set.Iy Set the value for property Iy
            validateattributes(iy, {'numeric'}, {'nonempty', 'scalar'}, 'robot_SetInertiaRequest', 'Iy');
            
            obj.JavaMessage.setIy(iy);
        end
        
        function iz = get.Iz(obj)
            %get.Iz Get the value for property Iz
            iz = double(obj.JavaMessage.getIz);
        end
        
        function set.Iz(obj, iz)
            %set.Iz Set the value for property Iz
            validateattributes(iz, {'numeric'}, {'nonempty', 'scalar'}, 'robot_SetInertiaRequest', 'Iz');
            
            obj.JavaMessage.setIz(iz);
        end
    end
    
    methods (Access = protected)
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.M = obj.M;
            cpObj.Cgx = obj.Cgx;
            cpObj.Cgy = obj.Cgy;
            cpObj.Cgz = obj.Cgz;
            cpObj.Ix = obj.Ix;
            cpObj.Iy = obj.Iy;
            cpObj.Iz = obj.Iz;
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.M = strObj.M;
            obj.Cgx = strObj.Cgx;
            obj.Cgy = strObj.Cgy;
            obj.Cgz = strObj.Cgz;
            obj.Ix = strObj.Ix;
            obj.Iy = strObj.Iy;
            obj.Iz = strObj.Iz;
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.M = obj.M;
            strObj.Cgx = obj.Cgx;
            strObj.Cgy = obj.Cgy;
            strObj.Cgz = obj.Cgz;
            strObj.Ix = obj.Ix;
            strObj.Iy = obj.Iy;
            strObj.Iz = obj.Iz;
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.robot_comm.robot_SetInertiaRequest.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.robot_comm.robot_SetInertiaRequest;
            obj.reload(strObj);
        end
    end
end
