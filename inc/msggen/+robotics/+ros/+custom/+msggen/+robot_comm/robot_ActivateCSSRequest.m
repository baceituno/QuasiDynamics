classdef robot_ActivateCSSRequest < robotics.ros.Message
    %robot_ActivateCSSRequest MATLAB implementation of robot_comm/robot_ActivateCSSRequest
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2018 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'robot_comm/robot_ActivateCSSRequest' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'cbb6ab5d4eba067a760a9e42285507e0' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Dependent)
        RefFrame
        RefOrientQ0
        RefOrientQx
        RefOrientQy
        RefOrientQz
        SoftDir
        Stiffness
        StiffnessNonSoftDir
        AllowMove
        Ramp
    end
    
    properties (Constant, Hidden)
        PropertyList = {'AllowMove', 'Ramp', 'RefFrame', 'RefOrientQ0', 'RefOrientQx', 'RefOrientQy', 'RefOrientQz', 'SoftDir', 'Stiffness', 'StiffnessNonSoftDir'} % List of non-constant message properties
        ROSPropertyList = {'allowMove', 'ramp', 'refFrame', 'refOrient_q0', 'refOrient_qx', 'refOrient_qy', 'refOrient_qz', 'softDir', 'stiffness', 'stiffnessNonSoftDir'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = robot_ActivateCSSRequest(msg)
            %robot_ActivateCSSRequest Construct the message object robot_ActivateCSSRequest
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function refframe = get.RefFrame(obj)
            %get.RefFrame Get the value for property RefFrame
            refframe = int32(obj.JavaMessage.getRefFrame);
        end
        
        function set.RefFrame(obj, refframe)
            %set.RefFrame Set the value for property RefFrame
            validateattributes(refframe, {'numeric'}, {'nonempty', 'scalar'}, 'robot_ActivateCSSRequest', 'RefFrame');
            
            obj.JavaMessage.setRefFrame(refframe);
        end
        
        function reforientq0 = get.RefOrientQ0(obj)
            %get.RefOrientQ0 Get the value for property RefOrientQ0
            reforientq0 = double(obj.JavaMessage.getRefOrientQ0);
        end
        
        function set.RefOrientQ0(obj, reforientq0)
            %set.RefOrientQ0 Set the value for property RefOrientQ0
            validateattributes(reforientq0, {'numeric'}, {'nonempty', 'scalar'}, 'robot_ActivateCSSRequest', 'RefOrientQ0');
            
            obj.JavaMessage.setRefOrientQ0(reforientq0);
        end
        
        function reforientqx = get.RefOrientQx(obj)
            %get.RefOrientQx Get the value for property RefOrientQx
            reforientqx = double(obj.JavaMessage.getRefOrientQx);
        end
        
        function set.RefOrientQx(obj, reforientqx)
            %set.RefOrientQx Set the value for property RefOrientQx
            validateattributes(reforientqx, {'numeric'}, {'nonempty', 'scalar'}, 'robot_ActivateCSSRequest', 'RefOrientQx');
            
            obj.JavaMessage.setRefOrientQx(reforientqx);
        end
        
        function reforientqy = get.RefOrientQy(obj)
            %get.RefOrientQy Get the value for property RefOrientQy
            reforientqy = double(obj.JavaMessage.getRefOrientQy);
        end
        
        function set.RefOrientQy(obj, reforientqy)
            %set.RefOrientQy Set the value for property RefOrientQy
            validateattributes(reforientqy, {'numeric'}, {'nonempty', 'scalar'}, 'robot_ActivateCSSRequest', 'RefOrientQy');
            
            obj.JavaMessage.setRefOrientQy(reforientqy);
        end
        
        function reforientqz = get.RefOrientQz(obj)
            %get.RefOrientQz Get the value for property RefOrientQz
            reforientqz = double(obj.JavaMessage.getRefOrientQz);
        end
        
        function set.RefOrientQz(obj, reforientqz)
            %set.RefOrientQz Set the value for property RefOrientQz
            validateattributes(reforientqz, {'numeric'}, {'nonempty', 'scalar'}, 'robot_ActivateCSSRequest', 'RefOrientQz');
            
            obj.JavaMessage.setRefOrientQz(reforientqz);
        end
        
        function softdir = get.SoftDir(obj)
            %get.SoftDir Get the value for property SoftDir
            softdir = int32(obj.JavaMessage.getSoftDir);
        end
        
        function set.SoftDir(obj, softdir)
            %set.SoftDir Set the value for property SoftDir
            validateattributes(softdir, {'numeric'}, {'nonempty', 'scalar'}, 'robot_ActivateCSSRequest', 'SoftDir');
            
            obj.JavaMessage.setSoftDir(softdir);
        end
        
        function stiffness = get.Stiffness(obj)
            %get.Stiffness Get the value for property Stiffness
            stiffness = double(obj.JavaMessage.getStiffness);
        end
        
        function set.Stiffness(obj, stiffness)
            %set.Stiffness Set the value for property Stiffness
            validateattributes(stiffness, {'numeric'}, {'nonempty', 'scalar'}, 'robot_ActivateCSSRequest', 'Stiffness');
            
            obj.JavaMessage.setStiffness(stiffness);
        end
        
        function stiffnessnonsoftdir = get.StiffnessNonSoftDir(obj)
            %get.StiffnessNonSoftDir Get the value for property StiffnessNonSoftDir
            stiffnessnonsoftdir = double(obj.JavaMessage.getStiffnessNonSoftDir);
        end
        
        function set.StiffnessNonSoftDir(obj, stiffnessnonsoftdir)
            %set.StiffnessNonSoftDir Set the value for property StiffnessNonSoftDir
            validateattributes(stiffnessnonsoftdir, {'numeric'}, {'nonempty', 'scalar'}, 'robot_ActivateCSSRequest', 'StiffnessNonSoftDir');
            
            obj.JavaMessage.setStiffnessNonSoftDir(stiffnessnonsoftdir);
        end
        
        function allowmove = get.AllowMove(obj)
            %get.AllowMove Get the value for property AllowMove
            allowmove = int32(obj.JavaMessage.getAllowMove);
        end
        
        function set.AllowMove(obj, allowmove)
            %set.AllowMove Set the value for property AllowMove
            validateattributes(allowmove, {'numeric'}, {'nonempty', 'scalar'}, 'robot_ActivateCSSRequest', 'AllowMove');
            
            obj.JavaMessage.setAllowMove(allowmove);
        end
        
        function ramp = get.Ramp(obj)
            %get.Ramp Get the value for property Ramp
            ramp = double(obj.JavaMessage.getRamp);
        end
        
        function set.Ramp(obj, ramp)
            %set.Ramp Set the value for property Ramp
            validateattributes(ramp, {'numeric'}, {'nonempty', 'scalar'}, 'robot_ActivateCSSRequest', 'Ramp');
            
            obj.JavaMessage.setRamp(ramp);
        end
    end
    
    methods (Access = protected)
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.RefFrame = obj.RefFrame;
            cpObj.RefOrientQ0 = obj.RefOrientQ0;
            cpObj.RefOrientQx = obj.RefOrientQx;
            cpObj.RefOrientQy = obj.RefOrientQy;
            cpObj.RefOrientQz = obj.RefOrientQz;
            cpObj.SoftDir = obj.SoftDir;
            cpObj.Stiffness = obj.Stiffness;
            cpObj.StiffnessNonSoftDir = obj.StiffnessNonSoftDir;
            cpObj.AllowMove = obj.AllowMove;
            cpObj.Ramp = obj.Ramp;
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.RefFrame = strObj.RefFrame;
            obj.RefOrientQ0 = strObj.RefOrientQ0;
            obj.RefOrientQx = strObj.RefOrientQx;
            obj.RefOrientQy = strObj.RefOrientQy;
            obj.RefOrientQz = strObj.RefOrientQz;
            obj.SoftDir = strObj.SoftDir;
            obj.Stiffness = strObj.Stiffness;
            obj.StiffnessNonSoftDir = strObj.StiffnessNonSoftDir;
            obj.AllowMove = strObj.AllowMove;
            obj.Ramp = strObj.Ramp;
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.RefFrame = obj.RefFrame;
            strObj.RefOrientQ0 = obj.RefOrientQ0;
            strObj.RefOrientQx = obj.RefOrientQx;
            strObj.RefOrientQy = obj.RefOrientQy;
            strObj.RefOrientQz = obj.RefOrientQz;
            strObj.SoftDir = obj.SoftDir;
            strObj.Stiffness = obj.Stiffness;
            strObj.StiffnessNonSoftDir = obj.StiffnessNonSoftDir;
            strObj.AllowMove = obj.AllowMove;
            strObj.Ramp = obj.Ramp;
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.robot_comm.robot_ActivateCSSRequest.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.robot_comm.robot_ActivateCSSRequest;
            obj.reload(strObj);
        end
    end
end
