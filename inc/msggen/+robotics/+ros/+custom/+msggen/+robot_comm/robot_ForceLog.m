classdef robot_ForceLog < robotics.ros.Message
    %robot_ForceLog MATLAB implementation of robot_comm/robot_ForceLog
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2018 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'robot_comm/robot_ForceLog' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'e69a688c0d45a806a3e0dc3ba264486c' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Dependent)
        Date
        Time
        TimeStamp
        Fx
        Fy
        Fz
        Tx
        Ty
        Tz
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Date', 'Fx', 'Fy', 'Fz', 'Time', 'TimeStamp', 'Tx', 'Ty', 'Tz'} % List of non-constant message properties
        ROSPropertyList = {'date', 'fx', 'fy', 'fz', 'time', 'timeStamp', 'tx', 'ty', 'tz'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = robot_ForceLog(msg)
            %robot_ForceLog Construct the message object robot_ForceLog
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function date = get.Date(obj)
            %get.Date Get the value for property Date
            date = char(obj.JavaMessage.getDate);
        end
        
        function set.Date(obj, date)
            %set.Date Set the value for property Date
            date = convertStringsToChars(date);
            
            validateattributes(date, {'char', 'string'}, {}, 'robot_ForceLog', 'Date');
            
            obj.JavaMessage.setDate(date);
        end
        
        function time = get.Time(obj)
            %get.Time Get the value for property Time
            time = char(obj.JavaMessage.getTime);
        end
        
        function set.Time(obj, time)
            %set.Time Set the value for property Time
            time = convertStringsToChars(time);
            
            validateattributes(time, {'char', 'string'}, {}, 'robot_ForceLog', 'Time');
            
            obj.JavaMessage.setTime(time);
        end
        
        function timestamp = get.TimeStamp(obj)
            %get.TimeStamp Get the value for property TimeStamp
            timestamp = double(obj.JavaMessage.getTimeStamp);
        end
        
        function set.TimeStamp(obj, timestamp)
            %set.TimeStamp Set the value for property TimeStamp
            validateattributes(timestamp, {'numeric'}, {'nonempty', 'scalar'}, 'robot_ForceLog', 'TimeStamp');
            
            obj.JavaMessage.setTimeStamp(timestamp);
        end
        
        function fx = get.Fx(obj)
            %get.Fx Get the value for property Fx
            fx = double(obj.JavaMessage.getFx);
        end
        
        function set.Fx(obj, fx)
            %set.Fx Set the value for property Fx
            validateattributes(fx, {'numeric'}, {'nonempty', 'scalar'}, 'robot_ForceLog', 'Fx');
            
            obj.JavaMessage.setFx(fx);
        end
        
        function fy = get.Fy(obj)
            %get.Fy Get the value for property Fy
            fy = double(obj.JavaMessage.getFy);
        end
        
        function set.Fy(obj, fy)
            %set.Fy Set the value for property Fy
            validateattributes(fy, {'numeric'}, {'nonempty', 'scalar'}, 'robot_ForceLog', 'Fy');
            
            obj.JavaMessage.setFy(fy);
        end
        
        function fz = get.Fz(obj)
            %get.Fz Get the value for property Fz
            fz = double(obj.JavaMessage.getFz);
        end
        
        function set.Fz(obj, fz)
            %set.Fz Set the value for property Fz
            validateattributes(fz, {'numeric'}, {'nonempty', 'scalar'}, 'robot_ForceLog', 'Fz');
            
            obj.JavaMessage.setFz(fz);
        end
        
        function tx = get.Tx(obj)
            %get.Tx Get the value for property Tx
            tx = double(obj.JavaMessage.getTx);
        end
        
        function set.Tx(obj, tx)
            %set.Tx Set the value for property Tx
            validateattributes(tx, {'numeric'}, {'nonempty', 'scalar'}, 'robot_ForceLog', 'Tx');
            
            obj.JavaMessage.setTx(tx);
        end
        
        function ty = get.Ty(obj)
            %get.Ty Get the value for property Ty
            ty = double(obj.JavaMessage.getTy);
        end
        
        function set.Ty(obj, ty)
            %set.Ty Set the value for property Ty
            validateattributes(ty, {'numeric'}, {'nonempty', 'scalar'}, 'robot_ForceLog', 'Ty');
            
            obj.JavaMessage.setTy(ty);
        end
        
        function tz = get.Tz(obj)
            %get.Tz Get the value for property Tz
            tz = double(obj.JavaMessage.getTz);
        end
        
        function set.Tz(obj, tz)
            %set.Tz Set the value for property Tz
            validateattributes(tz, {'numeric'}, {'nonempty', 'scalar'}, 'robot_ForceLog', 'Tz');
            
            obj.JavaMessage.setTz(tz);
        end
    end
    
    methods (Access = protected)
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.Date = obj.Date;
            cpObj.Time = obj.Time;
            cpObj.TimeStamp = obj.TimeStamp;
            cpObj.Fx = obj.Fx;
            cpObj.Fy = obj.Fy;
            cpObj.Fz = obj.Fz;
            cpObj.Tx = obj.Tx;
            cpObj.Ty = obj.Ty;
            cpObj.Tz = obj.Tz;
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Date = strObj.Date;
            obj.Time = strObj.Time;
            obj.TimeStamp = strObj.TimeStamp;
            obj.Fx = strObj.Fx;
            obj.Fy = strObj.Fy;
            obj.Fz = strObj.Fz;
            obj.Tx = strObj.Tx;
            obj.Ty = strObj.Ty;
            obj.Tz = strObj.Tz;
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Date = obj.Date;
            strObj.Time = obj.Time;
            strObj.TimeStamp = obj.TimeStamp;
            strObj.Fx = obj.Fx;
            strObj.Fy = obj.Fy;
            strObj.Fz = obj.Fz;
            strObj.Tx = obj.Tx;
            strObj.Ty = obj.Ty;
            strObj.Tz = obj.Tz;
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.robot_comm.robot_ForceLog.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.robot_comm.robot_ForceLog;
            obj.reload(strObj);
        end
    end
end
