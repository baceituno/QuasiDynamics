classdef robot_CartesianLog < robotics.ros.Message
    %robot_CartesianLog MATLAB implementation of robot_comm/robot_CartesianLog
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2018 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'robot_comm/robot_CartesianLog' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'eb2bb667c61dcbf678b5f4ff08b7284e' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Dependent)
        Date
        Time
        TimeStamp
        X
        Y
        Z
        Q0
        Qx
        Qy
        Qz
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Date', 'Q0', 'Qx', 'Qy', 'Qz', 'Time', 'TimeStamp', 'X', 'Y', 'Z'} % List of non-constant message properties
        ROSPropertyList = {'date', 'q0', 'qx', 'qy', 'qz', 'time', 'timeStamp', 'x', 'y', 'z'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = robot_CartesianLog(msg)
            %robot_CartesianLog Construct the message object robot_CartesianLog
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function date = get.Date(obj)
            %get.Date Get the value for property Date
            date = char(obj.JavaMessage.getDate);
        end
        
        function set.Date(obj, date)
            %set.Date Set the value for property Date
            date = convertStringsToChars(date);
            
            validateattributes(date, {'char', 'string'}, {}, 'robot_CartesianLog', 'Date');
            
            obj.JavaMessage.setDate(date);
        end
        
        function time = get.Time(obj)
            %get.Time Get the value for property Time
            time = char(obj.JavaMessage.getTime);
        end
        
        function set.Time(obj, time)
            %set.Time Set the value for property Time
            time = convertStringsToChars(time);
            
            validateattributes(time, {'char', 'string'}, {}, 'robot_CartesianLog', 'Time');
            
            obj.JavaMessage.setTime(time);
        end
        
        function timestamp = get.TimeStamp(obj)
            %get.TimeStamp Get the value for property TimeStamp
            timestamp = double(obj.JavaMessage.getTimeStamp);
        end
        
        function set.TimeStamp(obj, timestamp)
            %set.TimeStamp Set the value for property TimeStamp
            validateattributes(timestamp, {'numeric'}, {'nonempty', 'scalar'}, 'robot_CartesianLog', 'TimeStamp');
            
            obj.JavaMessage.setTimeStamp(timestamp);
        end
        
        function x = get.X(obj)
            %get.X Get the value for property X
            x = double(obj.JavaMessage.getX);
        end
        
        function set.X(obj, x)
            %set.X Set the value for property X
            validateattributes(x, {'numeric'}, {'nonempty', 'scalar'}, 'robot_CartesianLog', 'X');
            
            obj.JavaMessage.setX(x);
        end
        
        function y = get.Y(obj)
            %get.Y Get the value for property Y
            y = double(obj.JavaMessage.getY);
        end
        
        function set.Y(obj, y)
            %set.Y Set the value for property Y
            validateattributes(y, {'numeric'}, {'nonempty', 'scalar'}, 'robot_CartesianLog', 'Y');
            
            obj.JavaMessage.setY(y);
        end
        
        function z = get.Z(obj)
            %get.Z Get the value for property Z
            z = double(obj.JavaMessage.getZ);
        end
        
        function set.Z(obj, z)
            %set.Z Set the value for property Z
            validateattributes(z, {'numeric'}, {'nonempty', 'scalar'}, 'robot_CartesianLog', 'Z');
            
            obj.JavaMessage.setZ(z);
        end
        
        function q0 = get.Q0(obj)
            %get.Q0 Get the value for property Q0
            q0 = double(obj.JavaMessage.getQ0);
        end
        
        function set.Q0(obj, q0)
            %set.Q0 Set the value for property Q0
            validateattributes(q0, {'numeric'}, {'nonempty', 'scalar'}, 'robot_CartesianLog', 'Q0');
            
            obj.JavaMessage.setQ0(q0);
        end
        
        function qx = get.Qx(obj)
            %get.Qx Get the value for property Qx
            qx = double(obj.JavaMessage.getQx);
        end
        
        function set.Qx(obj, qx)
            %set.Qx Set the value for property Qx
            validateattributes(qx, {'numeric'}, {'nonempty', 'scalar'}, 'robot_CartesianLog', 'Qx');
            
            obj.JavaMessage.setQx(qx);
        end
        
        function qy = get.Qy(obj)
            %get.Qy Get the value for property Qy
            qy = double(obj.JavaMessage.getQy);
        end
        
        function set.Qy(obj, qy)
            %set.Qy Set the value for property Qy
            validateattributes(qy, {'numeric'}, {'nonempty', 'scalar'}, 'robot_CartesianLog', 'Qy');
            
            obj.JavaMessage.setQy(qy);
        end
        
        function qz = get.Qz(obj)
            %get.Qz Get the value for property Qz
            qz = double(obj.JavaMessage.getQz);
        end
        
        function set.Qz(obj, qz)
            %set.Qz Set the value for property Qz
            validateattributes(qz, {'numeric'}, {'nonempty', 'scalar'}, 'robot_CartesianLog', 'Qz');
            
            obj.JavaMessage.setQz(qz);
        end
    end
    
    methods (Access = protected)
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.Date = obj.Date;
            cpObj.Time = obj.Time;
            cpObj.TimeStamp = obj.TimeStamp;
            cpObj.X = obj.X;
            cpObj.Y = obj.Y;
            cpObj.Z = obj.Z;
            cpObj.Q0 = obj.Q0;
            cpObj.Qx = obj.Qx;
            cpObj.Qy = obj.Qy;
            cpObj.Qz = obj.Qz;
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Date = strObj.Date;
            obj.Time = strObj.Time;
            obj.TimeStamp = strObj.TimeStamp;
            obj.X = strObj.X;
            obj.Y = strObj.Y;
            obj.Z = strObj.Z;
            obj.Q0 = strObj.Q0;
            obj.Qx = strObj.Qx;
            obj.Qy = strObj.Qy;
            obj.Qz = strObj.Qz;
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Date = obj.Date;
            strObj.Time = obj.Time;
            strObj.TimeStamp = obj.TimeStamp;
            strObj.X = obj.X;
            strObj.Y = obj.Y;
            strObj.Z = obj.Z;
            strObj.Q0 = obj.Q0;
            strObj.Qx = obj.Qx;
            strObj.Qy = obj.Qy;
            strObj.Qz = obj.Qz;
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.robot_comm.robot_CartesianLog.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.robot_comm.robot_CartesianLog;
            obj.reload(strObj);
        end
    end
end
